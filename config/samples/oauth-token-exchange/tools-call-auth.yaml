apiVersion: kuadrant.io/v1
kind: AuthPolicy
metadata:
  name: mcps-auth-policy
  namespace: gateway-system
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: mcp-gateway
    sectionName: mcps
  rules:
    authentication: #validates the token
      'keycloak':
        jwt:
          issuerUrl: http://keycloak.127-0-0-1.sslip.io:8889/realms/mcp
    metadata:
      vault:
        http:
          urlExpression: |
            "http://vault.vault.svc.cluster.local:8200/v1/secret/data/" + auth.identity.preferred_username + "/" + request.host
          method: GET
          credentials:
            customHeader:
              name: X-Vault-Token
          sharedSecretRef:
            name: token-exchange
            key: vault-token
        priority: 0
      oauth-token-exchange:
        when:
          - predicate: "!has(auth.metadata.vault.data) || !has(auth.metadata.vault.data.data) || !has(auth.metadata.vault.data.data.token) || type(auth.metadata.vault.data.data.token) != string"
          - predicate: type(auth.identity.aud) != string || auth.identity.aud != request.host
        http:
          url: http://keycloak.127-0-0-1.sslip.io:8889/realms/mcp/protocol/openid-connect/token
          method: POST
          credentials:
            authorizationHeader:
              prefix: Basic
          sharedSecretRef:
            name: token-exchange
            key: oauth-client-basic-auth
          bodyParameters:
            grant_type:
              value: urn:ietf:params:oauth:grant-type:token-exchange
            subject_token:
              expression: request.headers['authorization'].split('Bearer ')[1] # remove "Bearer "
            subject_token_type:
              value: urn:ietf:params:oauth:token-type:access_token
            audience:
              expression: request.host
            scope:
              value: openid
        priority: 1
    authorization:
      'token':
        opa:
          rego: |
            scoped_jwt := object.get(object.get(object.get(input.auth, "metadata", {}), "oauth-token-exchange", {}), "access_token", "")
            jwt := j { scoped_jwt != ""; j := scoped_jwt }
            jwt := j { scoped_jwt == ""; j := split(input.request.headers["authorization"], "Bearer ")[1] }
            claims := c { [_, c, _] := io.jwt.decode(jwt) }
            allow = true
          allValues: true
        priority: 0
      'scoped-audience-check':
        when:
          - predicate: "!has(auth.metadata.vault.data) || !has(auth.metadata.vault.data.data) || !has(auth.metadata.vault.data.data.token) || type(auth.metadata.vault.data.data.token) != string"
        patternMatching:
          patterns:
            - predicate: has(auth.authorization.token.claims.aud) && type(auth.authorization.token.claims.aud) == string && auth.authorization.token.claims.aud == request.host
        priority: 1
      'tool-access-check':
        patternMatching:
          patterns:
            - predicate: |
                request.headers['x-mcp-toolname'] in (has(auth.authorization.token.claims.resource_access) && auth.authorization.token.claims.resource_access.exists(p, p == request.host) ? auth.authorization.token.claims.resource_access[request.host].roles : [])
        priority: 1
    response:
      success:
        headers:
          authorization:
            plain:
              expression: |
                "Bearer " + ((has(auth.metadata.vault.data) && has(auth.metadata.vault.data.data) && has(auth.metadata.vault.data.data.token) && type(auth.metadata.vault.data.data.token) == string) ? auth.metadata.vault.data.data.token : auth.authorization.token.jwt)
      unauthenticated:
        code: 401
        headers:
          'WWW-Authenticate':
            value: Bearer resource_metadata=http://mcp.127-0-0-1.sslip.io:8888/.well-known/oauth-protected-resource/mcp
        body:
          value: |
            {
              "error": "Forbidden",
              "message": "MCP Tool Access denied. Unauthenticated."
            }
      unauthorized:
        code: 403
        body:
          value: |
            {
              "error": "Forbidden",
              "message": "MCP Tool Access denied. Insufficient permissions for this tool."
            }
---
apiVersion: v1
kind: Secret
metadata:
  name: token-exchange
  namespace: kuadrant-system
stringData:
  oauth-client-basic-auth: bWNwLWdhdGV3YXk6c2VjcmV0
  vault-token: root
type: Opaque
